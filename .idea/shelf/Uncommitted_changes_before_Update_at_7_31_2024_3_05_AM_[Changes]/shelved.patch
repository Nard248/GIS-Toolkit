Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sys\r\nimport ast\r\nimport warnings\r\nimport shutil\r\n\r\nimport json\r\nimport pandas as pd\r\nimport geopandas as gpd\r\nfrom sqlalchemy import create_engine, Table, Column, Integer, String, MetaData, text\r\nfrom fiona.drvsupport import supported_drivers\r\nimport subprocess as sub\r\n\r\nfrom sqlalchemy.orm import sessionmaker\r\nimport time\r\nfrom datetime import datetime\r\n\r\nwarnings.filterwarnings('ignore')\r\n\r\nsupported_drivers['KML'] = 'rw'\r\nsupported_drivers['sqlite'] = 'rw'\r\nsupported_drivers['LIBKML'] = 'rw'\r\n\r\n\r\ndef query_footprint(state_abbr, fips, provider_id, tech_code, max_download, max_upload, br_code):\r\n    query = f\"\"\"\r\n        SELECT * FROM\r\n        ww_get_all_cb_polygons_20(ARRAY[{state_abbr}], \r\n        ARRAY[{fips}], \r\n        ARRAY[{provider_id}], ARRAY[{tech_code}], \r\n        ARRAY[{max_download}], ARRAY[{max_upload}], \r\n        ARRAY[{br_code}]);\r\n    \"\"\"\r\n    return query\r\n\r\n\r\ndef query_locations(state_abbr, fips):\r\n    query = f\"\"\"\r\nSELECT fcc.*                                 ,\r\n       stags.categories_served_unserved      ,\r\n       stags.categories_cd_ucd               ,\r\n       stags.categories_mso                  ,\r\n       stags.categories_cafii                ,\r\n       stags.categories_rdof                 ,\r\n       stags.categories_other_federal_grants ,\r\n       stags.categories_unserved_and_unfunded,\r\n       stags.categories_high_cost            ,\r\n       stags.categories_fiber                ,\r\n       uc.county_name                        ,\r\n       tgs.wired_dl25_ul3_r                  ,\r\n       tgs.wired_dl100_ul20_r                ,\r\n       tgs.terrestrial_dl25_ul3_r            ,\r\n       tgs.terrestrial_dl100_ul20_r          ,\r\n       tgs.wiredlfw_dl25_ul3_r               ,\r\n       tgs.wiredlfw_dl100_ul20_r             ,\r\n       tgs.wired_dl25_ul3_b                  ,\r\n       tgs.wired_dl100_ul20_b                ,\r\n       tgs.terrestrial_dl25_ul3_b            ,\r\n       tgs.terrestrial_dl100_ul20_b          ,\r\n       tgs.wiredlfw_dl25_ul3_b               ,\r\n       tgs.wiredlfw_dl100_ul20_b\r\n    FROM us_sw2020_fabric_harvested_rel4_full fcc\r\n        INNER JOIN fcc_bdc_fabric_rel4 stags ON fcc.fcc_location_id = stags.fcc_location_id\r\n        LEFT JOIN us_sw2020_fabric_harvested_new_taggs tgs on fcc.fcc_location_id = tgs.location_id\r\n        INNER JOIN us_counties uc ON fcc.fips_2020 = uc.fips_code\r\n    WHERE fcc.state_abbr = ANY(ARRAY[{state_abbr}]) AND fcc.fips_2020 = ANY(ARRAY[{fips}])\r\n    AND tgs.wiredlfw_dl25_ul3_r = 'U'\r\n    AND tgs.wiredlfw_dl25_ul3_b = 'U'\r\n    AND tgs.wiredlfw_dl100_ul20_r = 'U'\r\n    AND tgs.wiredlfw_dl100_ul20_b = 'U'\r\n    \"\"\"\r\n    return query\r\n\r\n\r\n# def get_filtered_fips(provider_id, state, con):\r\n#     query = f\"\"\"\r\n#     SELECT DISTINCT fips_code\r\n#     FROM us_census_block_data\r\n#     WHERE provider_id = ANY(%s) AND state_abbr = ANY(%s)\r\n#     \"\"\"\r\n#     print(query)\r\n#     return pd.read_sql(query, con, params=(provider_id, state))\r\n#\r\n#\r\n# def create_temp_table(con, fips_codes):\r\n#     fips_codes.to_sql('temp_fips_codes', con, index=False, if_exists='replace', schema='public')\r\n#\r\n\r\ndef query_counties_by_provider(provider_id, state, table_name):\r\n    query = f\"\"\"\r\n    SELECT uc.* \r\n    FROM us_counties uc\r\n    INNER JOIN {table_name} temp ON temp.county_fips = uc.fips \r\n    \"\"\"\r\n    # WHERE fips IN\r\n    #     (SELECT\r\n    #         DISTINCT fips_code\r\n    #      FROM us_census_block_data cbv\r\n    #      WHERE cb.provider_id = ANY(ARRAY[{provider_id}]) AND cb.state_abbr = ANY(ARRAY[{state}]))\r\n    return query\r\n\r\n\r\ndef get_federal_grants(provider_id, state_abbr, con, table_name):\r\n    query = f\"\"\"\r\nSELECT info.*, gm.geometry FROM\r\n(\r\n    SELECT gt.id,\r\n       ag.agency_name,\r\n       ag.funding_program_name,\r\n       ag.program_id,\r\n       ag.category_buffer,\r\n       gt.project_id,\r\n       gt.project,\r\n       gt.brandname,\r\n       gt.providerid,\r\n       gt.build_req,\r\n       gt.loc_plan,\r\n       gt.loc_sup,\r\n       gt.technology_code,\r\n       gt.technology_name,\r\n       gt.maxdown,\r\n       gt.maxup,\r\n       uc.state_abbr,\r\n       uc.county_name,\r\n       uc.fips,\r\n       gt.source,\r\n       gt.source_dat,\r\n       gt.categories_served\r\n    FROM us_federal_grants gt\r\n    INNER JOIN agencies ag ON gt.program_id = ag.program_id\r\n    INNER JOIN federal_gt_counties_pivot pivot on gt.id = pivot.grant_id\r\n    INNER JOIN us_counties uc on pivot.county_id = uc.id\r\n    INNER JOIN {table_name} temp ON uc.fips = temp.county_fips\r\n    WHERE uc.state_abbr = ANY(ARRAY[{state_abbr}])) info\r\nINNER JOIN us_federal_grants_geometry gm ON info.id = gm.grant_id;\r\n    \"\"\"\r\n    gdf = gpd.read_postgis(query, con, geom_col='geometry', crs='ESRI:102008')\r\n    return gdf\r\n\r\n\r\ndef get_hex(provider_id, state, con, table_name):\r\n    query = f\"\"\"\r\n    SELECT h3.*\r\n    FROM us_fcc_joined_h3_resolution8_test h3\r\n    INNER JOIN {table_name} temp ON h3.county_fips = temp.county_fips\r\n    \"\"\"\r\n\r\n    hex = gpd.GeoDataFrame.from_postgis(query, con, geom_col='geom', crs='EPSG:4326').to_crs('ESRI:102008')\r\n\r\n    return hex\r\n\r\n\r\ndef get_fip_codes(polygon_data, con, state_abbr):\r\n    query = f\"\"\"\r\n        SELECT state_abbr,fips,county_name\r\n        FROM us_counties\r\n        WHERE ST_Intersects(\r\n            geom,\r\n            ST_GeomFromText('{polygon_data.geometry.iloc[0]}', 102008)) AND state_abbr = ANY(ARRAY[{state_abbr}])\r\n    \"\"\"\r\n    counties = pd.read_sql(query, con)\r\n    return list(counties[\"fips\"].unique())\r\n\r\n\r\ndef query_state(state_abbr):\r\n    query = f\"\"\"\r\n        SELECT * FROM \"USStates\" WHERE \"StateAbbr\" = ANY(ARRAY[{state_abbr}])\r\n    \"\"\"\r\n    return query\r\n\r\n\r\ndef query_counties(fips):\r\n    query = f\"\"\"\r\n        SELECT * FROM us_counties WHERE fips = ANY(ARRAY[{fips}])\r\n    \"\"\"\r\n    return query\r\n\r\n\r\ndef write_gradient_ranges_staticly(gdf, path=r'C:\\OSGeo4W\\processing_utilities'):\r\n    range_dict = {\r\n        \"0\": {\"range\": (1, 3), \"color\": \"#e4e4f3\"},\r\n        \"1\": {\"range\": (3, 5), \"color\": \"#dbdbee\"},\r\n        \"2\": {\"range\": (5, 7), \"color\": \"#d1d1ea\"},\r\n        \"3\": {\"range\": (7, 10), \"color\": \"#c8c8e6\"},\r\n        \"4\": {\"range\": (10, 15), \"color\": \"#adadda\"},\r\n        \"5\": {\"range\": (15, 20), \"color\": \"#9b9bd1\"},\r\n        \"6\": {\"range\": (20, 25), \"color\": \"#8080c5\"},\r\n        \"7\": {\"range\": (25, 30), \"color\": \"#6d6dbd\"},\r\n        \"8\": {\"range\": (30, 40), \"color\": \"#5252b0\"},\r\n        \"9\": {\"range\": (40, 50), \"color\": \"#4949ac\"},\r\n        \"10\": {\"range\": (50, 75), \"color\": \"#4040a8\"},\r\n        \"11\": {\"range\": (75, 100), \"color\": \"#3737a4\"},\r\n        \"12\": {\"range\": (100, 150), \"color\": \"#2e2ea0\"},\r\n        \"13\": {\"range\": (150, 200), \"color\": \"#24249c\"},\r\n        \"14\": {\"range\": (200, 300), \"color\": \"#1b1b97\"},\r\n        \"15\": {\"range\": (300, 400), \"color\": \"#121293\"},\r\n        \"16\": {\"range\": (400, 500), \"color\": \"#09098f\"},\r\n        \"17\": {\"range\": (500, 50000), \"color\": \"#00008b\"}\r\n    }\r\n\r\n    max_number = gdf[\"Unserved_Unfunded\"].unique().max()\r\n\r\n    new_dict = dict()\r\n    for key, value in range_dict.items():\r\n        if max_number >= range_dict[key][\"range\"][0]:\r\n            new_dict[key] = value\r\n        else:\r\n            break\r\n    save_path = path + '/dict.txt'\r\n\r\n    with open(save_path, 'w') as convert_file:\r\n        convert_file.write(json.dumps(new_dict))\r\n\r\n    return save_path\r\n\r\n\r\ndef mile_to_meter(miles):\r\n    return miles * 1609.34\r\n\r\n\r\ndef create_formatted_excel(provider_name, market, unserved_unfunded_FP,\r\n                           unserved_unfunded_10_miles, unserved_unfunded_30_miles,\r\n                           in_footprint_counties, file_path, locations_within_counties, location_in_fp):\r\n    df = pd.DataFrame({\r\n        'Provider Name': [provider_name],\r\n        'Market': [market],\r\n        'Number of Unserved & Unfunded Locations in FP': [unserved_unfunded_FP],\r\n        'Number of Unserved & Unfunded Locations in 10 Miles Buffer Ring': [unserved_unfunded_10_miles],\r\n        'Number of Unserved & Unfunded Locations in 30 Miles Buffer Ring': [unserved_unfunded_30_miles],\r\n        'In Footprint Counties': [in_footprint_counties]\r\n    })\r\n\r\n    # Start a writer instance using xlsxwriter\r\n    writer = pd.ExcelWriter(file_path, engine='xlsxwriter')\r\n    df.to_excel(writer, index=False, sheet_name='Sheet1')\r\n\r\n    # Access the xlsxwriter workbook and worksheet objects\r\n    workbook = writer.book\r\n    worksheet = writer.sheets['Sheet1']\r\n\r\n    # Define the formats\r\n    header_format = workbook.add_format({'bg_color': '#9BBB59', 'bold': True})\r\n    header_format2 = workbook.add_format({'bg_color': '#F79646', 'bold': True})\r\n    provider_format = workbook.add_format({'bg_color': '#C5D9F1', 'bold': True})\r\n    bold_format = workbook.add_format({'bold': True})\r\n    light_blue_format = workbook.add_format({'bg_color': '#DAE8FC', 'bold': True})\r\n\r\n    # Apply the formats to the header cells\r\n    worksheet.write('A1', 'Provider Name', header_format)\r\n    worksheet.write('B1', 'Market', header_format)\r\n    worksheet.write('C1', 'Number of Unserved & Unfunded Locations in FP', header_format2)\r\n    worksheet.write('D1', 'Number of Unserved & Unfunded Locations in 10 Miles Buffer Ring', header_format2)\r\n    worksheet.write('E1', 'Number of Unserved & Unfunded Locations in 30 Miles Buffer Ring', header_format2)\r\n    worksheet.write('F1', 'Number of Unserved & Unfunded Locations in Counties of FP', light_blue_format)  # New header\r\n\r\n    # Apply bold format to 'Provider Name' and 'Market' values\r\n    worksheet.write('A2', provider_name, provider_format)\r\n    worksheet.write('B2', market, bold_format)\r\n    worksheet.write('F2', in_footprint_counties, light_blue_format)  # New value\r\n\r\n    # Set the column widths\r\n    worksheet.set_column('A:A', 20)\r\n    worksheet.set_column('B:B', 10)\r\n    worksheet.set_column('C:C', 35)\r\n    worksheet.set_column('D:E', 45)\r\n    worksheet.set_column('F:F', 20)  # New column width\r\n\r\n    # Calculate counts and merge dataframes\r\n    locations_within_counties_counts = locations_within_counties['county_name'].value_counts().reset_index()\r\n    locations_within_counties_counts.columns = ['County', 'Count of Locations']\r\n\r\n    location_in_fp_counts = location_in_fp['county_name'].value_counts().reset_index()\r\n    location_in_fp_counts.columns = ['County', 'Count of Locations in FP']\r\n\r\n    high_cost_counts = locations_within_counties[locations_within_counties['categories_high_cost'] == True][\r\n        'county_name'].value_counts().reset_index()\r\n    high_cost_counts.columns = ['County', 'Count of High Cost']\r\n\r\n    merged_df = locations_within_counties_counts.merge(location_in_fp_counts, on='County', how='left').merge(\r\n        high_cost_counts, on='County', how='left')\r\n    merged_df['Count of Locations in FP'] = merged_df['Count of Locations in FP'].fillna(0).astype(int)\r\n    merged_df['Count of High Cost'] = merged_df['Count of High Cost'].fillna(0).astype(int)\r\n\r\n    # Write the new DataFrame to a new sheet in the same Excel file\r\n    merged_df.to_excel(writer, index=False, sheet_name='County Counts and High Cost')\r\n\r\n    # Access the new worksheet\r\n    merged_worksheet = writer.sheets['County Counts and High Cost']\r\n\r\n    # Apply header format to the new worksheet\r\n    merged_worksheet.write('A1', 'County Name', header_format)\r\n    merged_worksheet.write('B1', 'Number of Unserved & Unfunded Locations in County', header_format)\r\n    merged_worksheet.write('C1', 'Number of Unserved & Unfunded Locations in FP', header_format)\r\n    merged_worksheet.write('D1', 'High Cost', header_format)\r\n\r\n    # Set the column widths for the new worksheet\r\n    merged_worksheet.set_column('A:A', 15)\r\n    merged_worksheet.set_column('B:B', 20)\r\n    merged_worksheet.set_column('C:C', 25)\r\n    merged_worksheet.set_column('D:D', 20)\r\n\r\n    # Close the Pandas Excel writer and output the Excel file\r\n    writer.close()\r\n\r\n\r\ndef call_qgis_for_30_10(name_of_project, state_name, unserved_unfunded_in_fp, unserved_unfunded_10,\r\n                        unserved_unfunded_30, state_polygon, county_polygon, cb_footprint,\r\n                        cb_footprint_10, cb_footprint_30, provider_name, project_path, hex_layer, counties_footprint,\r\n                        locations_in_counties, grad_path,  rdof_path, e_acam_path,\r\n                                acam_path, ntia_path, rus_path, caf_ii_path, cpf_path, footprint_fiber_path, footprint_no_fiber_path):\r\n    my_call = [r\"C:\\OSGeo4W\\OSGeo4W.bat\", r\"python-qgis\",\r\n               r\"C:\\OSGeo4W\\processing_utilities\\save_30_10_buffer.py\",\r\n               name_of_project, state_name, unserved_unfunded_in_fp, unserved_unfunded_10,\r\n               unserved_unfunded_30, state_polygon, county_polygon, cb_footprint,\r\n               cb_footprint_10, cb_footprint_30, provider_name, project_path, hex_layer, counties_footprint,\r\n               locations_in_counties, grad_path,  rdof_path, e_acam_path,\r\n                                acam_path, ntia_path, rus_path, caf_ii_path, cpf_path, footprint_fiber_path, footprint_no_fiber_path]\r\n    p = sub.Popen(my_call, stdout=sub.PIPE, stderr=sub.PIPE)\r\n    stdout, stderr = p.communicate()\r\n\r\n    print(stdout, stderr)\r\n    return stdout, stderr\r\n\r\n\r\ndef log_time(log_file, message, start):\r\n    end = time.time()\r\n    elapsed_time = end - start\r\n    log_message = f\"{message}: {elapsed_time:.2f} seconds\\n\"\r\n    print(log_message.strip())\r\n    log_file.write(log_message)\r\n    return end\r\n\r\n\r\ndef main():\r\n    start_time = time.time()\r\n\r\n    state_abbr = sys.argv[1]\r\n    fips = sys.argv[2]\r\n    provider_id = sys.argv[3]\r\n    tech_code = sys.argv[4]\r\n    max_download = sys.argv[5]\r\n    max_upload = sys.argv[6]\r\n    br_code = sys.argv[7]\r\n    provider_name = sys.argv[8]\r\n    path = sys.argv[9]\r\n    state_name = sys.argv[10]\r\n    file_type = sys.argv[11]\r\n\r\n    # Create results directory\r\n    step_start_time = time.time()\r\n    results_dir = os.path.join(path, \"results\")\r\n\r\n    if os.path.exists(results_dir):\r\n        shutil.rmtree(results_dir)\r\n\r\n    os.mkdir(results_dir)\r\n    save_path = results_dir\r\n    # step_start_time = log_time(None, \"Creating results directory\", step_start_time)\r\n\r\n    # Open log file\r\n    log_file_path = os.path.join(save_path, \"log.txt\")\r\n    with open(log_file_path, \"a\") as log_file:\r\n        step_start_time = log_time(log_file, \"Starting the Script of 30-10 Mile Buffer Version as of 7/31/2024\",\r\n                                   step_start_time)\r\n\r\n        # Database connection\r\n        step_start_time = time.time()\r\n        db_connection_url = \"postgresql://postgresqlwireless2020:software2020!!@wirelesspostgresqlflexible.postgres.database.azure.com:5432/wiroidb2\"\r\n        con = create_engine(db_connection_url)\r\n        step_start_time = log_time(log_file, \"Establishing database connection\", step_start_time)\r\n\r\n        try:\r\n            metadata = MetaData()\r\n\r\n            # Create temporary table\r\n            step_start_time = time.time()\r\n\r\n            current_timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n            table_name = f\"temp_fips_{current_timestamp}\"\r\n\r\n            temp_fips_table = Table(\r\n                table_name, metadata,\r\n                Column('id', Integer, primary_key=True, autoincrement=True),\r\n                Column('county_fips', String(255))\r\n            )\r\n\r\n            metadata.create_all(con)\r\n            step_start_time = log_time(log_file, \"Creating temporary table\", step_start_time)\r\n\r\n            # Insert data into temporary table\r\n            step_start_time = time.time()\r\n            Session = sessionmaker(bind=con)\r\n            session = Session()\r\n\r\n            insert_data_query = f\"\"\"\r\n            INSERT INTO {table_name} (county_fips)\r\n            SELECT DISTINCT fips_code\r\n            FROM us_census_block_data cb\r\n            WHERE provider_id = ANY(ARRAY[{provider_id}]) AND cb.state_abbr = ANY(ARRAY[{state_abbr}]);\r\n            \"\"\"\r\n\r\n            provider_id_var = ast.literal_eval(provider_id)\r\n            if 130627 in provider_id_var:\r\n                insert_data_query = f\"\"\"\r\n                            INSERT INTO {table_name} (county_fips)\r\n                            SELECT DISTINCT fips_code\r\n                            FROM us_census_block_data cb\r\n                            WHERE provider_id = ANY(ARRAY[{provider_id}]) AND cb.state_abbr = ANY(ARRAY[{state_abbr}]) AND cb.fips_code = ANY(ARRAY[{fips}]);\r\n                            \"\"\"\r\n\r\n            session.execute(text(insert_data_query))\r\n            session.commit()\r\n            step_start_time = log_time(log_file, \"Inserting data into temporary table\", step_start_time)\r\n\r\n            # Query footprint\r\n            step_start_time = time.time()\r\n            query_fp = query_footprint(state_abbr, fips, provider_id, tech_code, max_download, max_upload, br_code)\r\n            footprint_raw = gpd.GeoDataFrame.from_postgis(query_fp, con, geom_col='Geometry', crs='EPSG:4326').to_crs(\r\n                \"ESRI:102008\")\r\n\r\n            footprint = footprint_raw.dissolve()\r\n            ten_mile_buffer = footprint.buffer(mile_to_meter(10))\r\n            ten_mile_dif = ten_mile_buffer.difference(footprint)\r\n            thirty_mile_dif_raw = footprint.buffer(mile_to_meter(30))\r\n            thirty_mile_dif = thirty_mile_dif_raw.difference(ten_mile_buffer)\r\n            step_start_time = log_time(log_file, \"Querying and processing footprint\", step_start_time)\r\n\r\n            # Get FIP codes\r\n            step_start_time = time.time()\r\n            fips = get_fip_codes(thirty_mile_dif_raw, con, state_abbr)\r\n            step_start_time = log_time(log_file, \"Getting FIP codes\", step_start_time)\r\n\r\n            # Query locations\r\n            step_start_time = time.time()\r\n            query_loc = query_locations(state_abbr, fips)\r\n            locations = gpd.GeoDataFrame.from_postgis(query_loc, con, geom_col='geom', crs='EPSG:4326').to_crs(\r\n                \"ESRI:102008\")\r\n            locations = locations.drop_duplicates(subset=['fcc_location_id'], keep='last')\r\n            step_start_time = log_time(log_file, \"Querying locations\", step_start_time)\r\n\r\n            # Query state\r\n            step_start_time = time.time()\r\n            state = gpd.GeoDataFrame.from_postgis(query_state(state_abbr), con, geom_col='geometry',\r\n                                                  crs='ESRI:102008').to_crs('EPSG:4326')\r\n            step_start_time = log_time(log_file, \"Querying state\", step_start_time)\r\n\r\n            # Query counties\r\n            step_start_time = time.time()\r\n            counties = gpd.GeoDataFrame.from_postgis(query_counties(fips), con, geom_col='geom',\r\n                                                     crs='ESRI:102008').to_crs('EPSG:4326')\r\n            counties_fp = gpd.GeoDataFrame.from_postgis(query_counties_by_provider(provider_id, state_abbr, table_name),\r\n                                                        con, geom_col='geom', crs='ESRI:102008').to_crs('EPSG:4326')\r\n            step_start_time = log_time(log_file, \"Querying counties\", step_start_time)\r\n\r\n            # Spatial joins and processing\r\n            step_start_time = time.time()\r\n            locations_in_cb_footprint = gpd.sjoin(locations, footprint_raw, how=\"inner\", predicate='intersects').to_crs(\r\n                'EPSG:4326')\r\n            locations_in_cb_footprint = locations_in_cb_footprint[locations.columns].drop_duplicates(\r\n                subset='fcc_location_id', keep='last')\r\n\r\n            locations_in_10mileBuffer = gpd.sjoin(locations, gpd.GeoDataFrame(geometry=ten_mile_dif), how=\"inner\",\r\n                                                  predicate='intersects').to_crs('EPSG:4326')\r\n            locations_in_10mileBuffer = locations_in_10mileBuffer[locations.columns].drop_duplicates(\r\n                subset='fcc_location_id', keep='last')\r\n\r\n            locations_in_30mileBuffer = gpd.sjoin(locations, gpd.GeoDataFrame(geometry=thirty_mile_dif), how=\"inner\",\r\n                                                  predicate='intersects').to_crs('EPSG:4326')\r\n            locations_in_30mileBuffer = locations_in_30mileBuffer[locations.columns].drop_duplicates(\r\n                subset='fcc_location_id', keep='last')\r\n            step_start_time = log_time(log_file, \"Spatial joins and processing\", step_start_time)\r\n\r\n            # Convert CRS and overlay\r\n            step_start_time = time.time()\r\n            ten_mile_dif = ten_mile_dif.to_crs('EPSG:4326')\r\n            thirty_mile_dif = thirty_mile_dif.to_crs('EPSG:4326')\r\n            footprint = footprint.to_crs('EPSG:4326')\r\n            ten_mile_dif = gpd.GeoDataFrame(geometry=ten_mile_dif)\r\n            thirty_mile_dif = gpd.GeoDataFrame(geometry=thirty_mile_dif)\r\n            ten_mile_dif = gpd.overlay(ten_mile_dif, state, how='intersection')\r\n            thirty_mile_dif = gpd.overlay(thirty_mile_dif, state, how='intersection')\r\n            step_start_time = log_time(log_file, \"Converting CRS and overlay\", step_start_time)\r\n\r\n            # Hex grid processing\r\n            step_start_time = time.time()\r\n\r\n            hex_gdf = get_hex(provider_id, state_abbr, con, table_name=table_name)\r\n            joined_gdf = gpd.sjoin(hex_gdf, locations, how=\"inner\", predicate='contains')\r\n            location_counts = joined_gdf.groupby(joined_gdf.index).size()\r\n            hex_gdf['Unserved_Unfunded'] = \\\r\n                hex_gdf.merge(location_counts.rename('Unserved_Unfunded'), how='left', left_index=True,\r\n                              right_index=True)[\r\n                    'Unserved_Unfunded']\r\n            hex_gdf = hex_gdf.dropna(subset=['Unserved_Unfunded'])\r\n            hex_gdf['Unserved_Unfunded'] = hex_gdf['Unserved_Unfunded'].fillna(0)\r\n            hex_gdf = hex_gdf[hex_gdf['Unserved_Unfunded'] > 0]\r\n            hex_gdf = hex_gdf.to_crs('EPSG:4326')\r\n            hex_gdf = hex_gdf.drop_duplicates(subset='h3_res8_id', keep='last')\r\n            hex_gdf = hex_gdf.drop(\r\n                columns=['frn', 'provider_id', 'brand_name', 'Technology Code', 'max_advertised_download_speed',\r\n                         'max_advertised_upload_speed', 'low_latency', 'br_code', 'max_down_id', 'max_up_id', 'id',\r\n                         'technology', 'state_abbr'])\r\n            gradient_path = write_gradient_ranges_staticly(hex_gdf)\r\n            step_start_time = log_time(log_file, \"Hex grid processing\", step_start_time)\r\n\r\n            step_start_time = time.time()\r\n            locations_within_counties = gpd.sjoin(locations, counties_fp.to_crs('ESRI:102008').drop(\r\n                columns=['id', 'state_abbr', 'county_name']), how=\"inner\", predicate='within').to_crs('EPSG:4326')\r\n            locations_within_counties = locations_within_counties[locations.columns].drop_duplicates(\r\n                subset='fcc_location_id', keep='last')\r\n            step_start_time = log_time(log_file, \"Processing locations within counties\", step_start_time)\r\n\r\n            # Federal grants\r\n            step_start_time = time.time()\r\n            federal_grants = get_federal_grants(provider_id, state_abbr, con, table_name=table_name).to_crs('EPSG:4326')\r\n\r\n            clipped_geometries = []\r\n            counties_fl = counties_fp.dissolve()\r\n            for idx, row in federal_grants.iterrows():\r\n                clipped_geometry = row['geometry'].intersection(counties_fl.unary_union)\r\n                if not clipped_geometry.is_empty:\r\n                    new_row = row.copy()\r\n                    new_row['geometry'] = clipped_geometry\r\n                    clipped_geometries.append(new_row)\r\n\r\n            federal_grants = gpd.GeoDataFrame(clipped_geometries, crs=federal_grants.crs, geometry='geometry')\r\n            step_start_time = log_time(log_file, \"Processing federal grants\", step_start_time)\r\n\r\n            # File export\r\n            step_start_time = time.time()\r\n            extension = '.shp'\r\n            if file_type == 'sqlite':\r\n                extension = '.sqlite'\r\n            elif file_type == 'kml':\r\n                extension = '.kml'\r\n\r\n            export_type_dict = {\".shp\": ['ESRI Shapefile'], '.sqlite': ['sqlite'], '.kml': [\"KML\"]}\r\n\r\n            cb_footprint = os.path.join(save_path, f'{provider_name} CB Footprint{extension}')\r\n            cb_footprint_10 = os.path.join(save_path, f'{provider_name} CB Footprint 10 Miles Buffer Ring{extension}')\r\n            cb_footprint_30 = os.path.join(save_path, f'{provider_name} CB Footprint 30 Miles Buffer Ring{extension}')\r\n            unserved_unfunded_in_fp = os.path.join(save_path, f'Unserved and Unfunded Locations in FP{extension}')\r\n            unserved_unfunded_10 = os.path.join(save_path,\r\n                                                f'Unserved and Unfunded Locations in 10 Miles Buffer Ring{extension}')\r\n            unserved_unfunded_30 = os.path.join(save_path,\r\n                                                f'Unserved and Unfunded Locations in 30 Miles Buffer Ring{extension}')\r\n            state_polygon = os.path.join(save_path, f'{state_name} State Outline{extension}')\r\n            county_polygon = os.path.join(save_path, f'{state_name} Counties Outline{extension}')\r\n            hex_layer = os.path.join(save_path, f'Hex Layer of Unserved and Unfunded Locations{extension}')\r\n            counties_footprint = os.path.join(save_path, f'{state_name} Counties of Footprint{extension}')\r\n            locations_in_counties = os.path.join(save_path,\r\n                                                 f'Unserved and Unfunded Locations in Counties of FP{extension}')\r\n            federal_grants_path = os.path.join(save_path, f'Federal Grants in {state_name}{extension}')\r\n\r\n            rdof_path, e_acam_path, acam_path, ntia_path, rus_path, caf_ii_path, cpf_path = '', '', '', '', '', '', ''\r\n\r\n            rdof_dataframe = federal_grants[federal_grants['category_buffer'] == 'RDOF']\r\n            e_acam_dataframe = federal_grants[federal_grants['category_buffer'] == 'E-ACAM']\r\n            acam_dataframe = federal_grants[federal_grants['category_buffer'] == 'ACAM']\r\n            ntia_dataframe = federal_grants[federal_grants['category_buffer'] == 'NTIA']\r\n            rus_dataframe = federal_grants[federal_grants['category_buffer'] == 'RUS Reconnect']\r\n            caf_ii_dataframe = federal_grants[federal_grants['category_buffer'] == 'CAF II']\r\n            cpf_dataframe = federal_grants[federal_grants['category_buffer'] == 'CPF']\r\n\r\n            if not rdof_dataframe.empty:\r\n                rdof_path = os.path.join(save_path, f'RDOF Federal Grants in {state_name}{extension}')\r\n                rdof_dataframe.to_file(rdof_path, driver=export_type_dict[extension][0])\r\n            if not e_acam_dataframe.empty:\r\n                e_acam_path = os.path.join(save_path, f'E-ACAM Federal Grants in {state_name}{extension}')\r\n                e_acam_dataframe.to_file(e_acam_path, driver=export_type_dict[extension][0])\r\n            if not acam_dataframe.empty:\r\n                acam_path = os.path.join(save_path, f'ACAM Federal Grants in {state_name}{extension}')\r\n                acam_dataframe.to_file(acam_path, driver=export_type_dict[extension][0])\r\n            if not ntia_dataframe.empty:\r\n                ntia_path = os.path.join(save_path, f'NTIA Federal Grants in {state_name}{extension}')\r\n                ntia_dataframe.to_file(ntia_path, driver=export_type_dict[extension][0])\r\n            if not rus_dataframe.empty:\r\n                rus_path = os.path.join(save_path, f'RUS Reconnect Federal Grants in {state_name}{extension}')\r\n                rus_dataframe.to_file(rus_path, driver=export_type_dict[extension][0])\r\n            if not caf_ii_dataframe.empty:\r\n                caf_ii_path = os.path.join(save_path, f'CAF II Federal Grants in {state_name}{extension}')\r\n                caf_ii_dataframe.to_file(caf_ii_path, driver=export_type_dict[extension][0])\r\n            if not cpf_dataframe.empty:\r\n                cpf_path = os.path.join(save_path, f'CPF Federal Grants in {state_name}{extension}')\r\n                cpf_dataframe.to_file(cpf_path, driver=export_type_dict[extension][0])\r\n\r\n            footprint_fiber = footprint_raw[footprint_raw['TechCode'] == 50].to_crs('EPSG:4326').dissolve()\r\n            footprint_no_fiber = footprint_raw[footprint_raw['TechCode'] != 50].to_crs('EPSG:4326').dissolve()\r\n\r\n            footprint_fiber_path, footrpint_no_fiber_path = '', ''\r\n\r\n            if not footprint_fiber.empty:\r\n                footprint_fiber_path = os.path.join(save_path, f'Fiber Footprint in {state_name}{extension}')\r\n                footprint_fiber.to_file(footprint_fiber_path, driver=export_type_dict[extension][0])\r\n            if not footprint_no_fiber.empty:\r\n                footrpint_no_fiber_path = os.path.join(save_path, f'Not Fiber Footprint in {state_name}{extension}')\r\n                footprint_no_fiber.to_file(footrpint_no_fiber_path, driver=export_type_dict[extension][0])\r\n\r\n\r\n            footprint.to_file(cb_footprint, driver=export_type_dict[extension][0])\r\n            ten_mile_dif.to_file(cb_footprint_10, driver=export_type_dict[extension][0])\r\n            thirty_mile_dif.to_file(cb_footprint_30, driver=export_type_dict[extension][0])\r\n            locations_in_cb_footprint.to_file(unserved_unfunded_in_fp, driver=export_type_dict[extension][0])\r\n            locations_in_10mileBuffer.to_file(unserved_unfunded_10, driver=export_type_dict[extension][0])\r\n            locations_in_30mileBuffer.to_file(unserved_unfunded_30, driver=export_type_dict[extension][0])\r\n            state.to_file(state_polygon, driver=export_type_dict[extension][0])\r\n            counties.to_file(county_polygon, driver=export_type_dict[extension][0])\r\n            hex_gdf.to_file(hex_layer, driver=export_type_dict[extension][0])\r\n            counties_fp.to_file(counties_footprint, driver=export_type_dict[extension][0])\r\n            locations_within_counties.to_file(locations_in_counties, driver=export_type_dict[extension][0])\r\n            step_start_time = log_time(log_file, \"Exporting files\", step_start_time)\r\n\r\n            # Call QGIS function\r\n            step_start_time = time.time()\r\n            call_qgis_for_30_10(f'{state_name} BufferedFootprint', state_name, unserved_unfunded_in_fp,\r\n                                unserved_unfunded_10, unserved_unfunded_30, state_polygon, county_polygon, cb_footprint,\r\n                                cb_footprint_10, cb_footprint_30, provider_name, save_path, hex_layer,\r\n                                counties_footprint,\r\n                                locations_in_counties, gradient_path, rdof_path, e_acam_path,\r\n                                acam_path, ntia_path, rus_path, caf_ii_path, cpf_path, footprint_fiber_path, footrpint_no_fiber_path)\r\n            step_start_time = log_time(log_file, \"Calling QGIS function\", step_start_time)\r\n\r\n            # Create Excel report\r\n            step_start_time = time.time()\r\n            path_excel = os.path.join(save_path, f'{state_name}_NumberReport.xlsx')\r\n            create_formatted_excel(provider_name, state_name, len(locations_in_cb_footprint),\r\n                                   len(locations_in_10mileBuffer),\r\n                                   len(locations_in_30mileBuffer), len(locations_within_counties), path_excel,\r\n                                   locations_within_counties, locations_in_cb_footprint)\r\n            step_start_time = log_time(log_file, \"Creating Excel report\", step_start_time)\r\n\r\n            # Delete temporary table\r\n            step_start_time = time.time()\r\n            delete_table_query = f\"DROP TABLE IF EXISTS {table_name};\"\r\n            session.execute(text(delete_table_query))\r\n            session.commit()\r\n            session.close()\r\n            step_start_time = log_time(log_file, \"Deleting temporary table\", step_start_time)\r\n\r\n        finally:\r\n            con = 0\r\n\r\n        total_time = time.time() - start_time\r\n        total_time_message = f\"Total execution time: {total_time:.2f} seconds\\n\"\r\n        print(total_time_message.strip())\r\n        log_file.write(total_time_message)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 2823c954fe04d7d803fab78105abfd10b812a95f)
+++ b/main.py	(date 1722380551945)
@@ -365,7 +365,7 @@
 
         # Database connection
         step_start_time = time.time()
-        db_connection_url = "postgresql://postgresqlwireless2020:software2020!!@wirelesspostgresqlflexible.postgres.database.azure.com:5432/wiroidb2"
+        db_connection_url = "DB-CON-URL"
         con = create_engine(db_connection_url)
         step_start_time = log_time(log_file, "Establishing database connection", step_start_time)
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e815a142-afe0-412f-8464-28d8de5125e9\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/dataSources.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2jvcdOpx8kLb1ID2x4TNqebOLcb\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/meloy/DataGripProjects/Wireless2020&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;ml.llm.AIAssistantPromptsLibrary&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;DatabaseDriversLRU&quot;: [\r\n      &quot;postgresql&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\meloy\\PycharmProjects\\Wireless2020\" />\r\n      <recent name=\"C:\\Users\\meloy\\PycharmProjects\\Wireless2020\\Utilities\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-PY-241.18034.82\" />\r\n        <option value=\"bundled-python-sdk-975db3bf15a3-2767605e8bc2-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-241.18034.82\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e815a142-afe0-412f-8464-28d8de5125e9\" name=\"Changes\" comment=\"\" />\r\n      <created>1722271078011</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1722271078011</updated>\r\n      <workItem from=\"1722271084565\" duration=\"13000\" />\r\n      <workItem from=\"1722271104059\" duration=\"378000\" />\r\n      <workItem from=\"1722271489102\" duration=\"4723000\" />\r\n      <workItem from=\"1722293241014\" duration=\"2531000\" />\r\n      <workItem from=\"1722353911211\" duration=\"4622000\" />\r\n      <workItem from=\"1722376986430\" duration=\"2668000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Wireless2020$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1722379341163\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2823c954fe04d7d803fab78105abfd10b812a95f)
+++ b/.idea/workspace.xml	(date 1722380737124)
@@ -5,8 +5,6 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e815a142-afe0-412f-8464-28d8de5125e9" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -33,28 +31,28 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Python.main.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/meloy/DataGripProjects/Wireless2020&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;ml.llm.AIAssistantPromptsLibrary&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python.main.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "git-widget-placeholder": "Merging main",
+    "ignore.virus.scanning.warn.message": "true",
+    "last_opened_file_path": "C:/Users/meloy/DataGripProjects/Wireless2020",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "ml.llm.AIAssistantPromptsLibrary",
+    "vue.rearranger.settings.migration": "true"
   },
-  &quot;keyToStringList&quot;: {
-    &quot;DatabaseDriversLRU&quot;: [
-      &quot;postgresql&quot;
+  "keyToStringList": {
+    "DatabaseDriversLRU": [
+      "postgresql"
     ]
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\meloy\PycharmProjects\Wireless2020" />
@@ -82,7 +80,7 @@
       <workItem from="1722271489102" duration="4723000" />
       <workItem from="1722293241014" duration="2531000" />
       <workItem from="1722353911211" duration="4622000" />
-      <workItem from="1722376986430" duration="2668000" />
+      <workItem from="1722376986430" duration="3704000" />
     </task>
     <servers />
   </component>
